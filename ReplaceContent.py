#!/usr/bin/env python
# encoding: utf-8
'''
tools.ReplaceContent -- shortdesc

replace content ReplaceContent is a description

It defines classes_and_methods

@author:     sty

@copyright:  2015 S.T.Y. All rights reserved.

@license:    license

@contact:    sty_email@163.com
@deffield    updated: Updated
'''

import sys
import os

from optparse import OptionParser
from __builtin__ import file

__all__ = []
__version__ = 0.1
__date__ = '2015-03-12'
__updated__ = '2015-03-12'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def replaceEveryLine(filename,begin,end):
    fileTmp = open(filename,'r+')
    lines = fileTmp.readlines()
    fileTmp = open(filename,'w+')
    for lineStr in lines:
        lineStr = lineStr[0:int(begin)]+lineStr[int(end):]
        fileTmp.write(lineStr)  
    fileTmp.close()     

def replaceContent(filename,old,new):
    fileTmp = open(filename,'r+')
    lines = fileTmp.readlines()
    fileTmp = open(filename,'w+')
    for lineStr in lines:
        if lineStr.find(old) != -1:
            lineStr = lineStr.replace(old,new)
        fileTmp.write(lineStr)  
    fileTmp.close()     
        
def procPath(path,sufixStr,old,new,line,begin,end): 
    if os.path.exists(path):
        for direc,subDirs,files in os.walk(path):
            for fileTmp in files :
                if os.path.splitext(fileTmp)[1][1:] == sufixStr:
                    if line== 'Y':
                        replaceEveryLine(os.path.join(direc,fileTmp), begin, end)
                    else:
                        replaceContent(os.path.join(direc,fileTmp), old, new)
                    print 'successful :'+ os.path.join(direc,fileTmp)
                
                

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2015 S.T.Y (sty)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-p", "--path", dest="path", help="set path for content replace [default: %default]", metavar="STRING")
        parser.add_option("-s", "--suffix", dest="suffix", help="file which has suffix to proccess [default: %default]", metavar="STRING")
        parser.add_option("-o", "--old", dest="old", help="set old string to be replaced [default: %default]", metavar="STRING")
        parser.add_option("-n", "--new", dest="new", help="set new string to replace [default: %default]", metavar="STRING")
        parser.add_option("-l", "--line", dest="line", help="replace by line mode, Y or N [default: %default]", metavar="BOOL")
        parser.add_option("-b", "--begin", dest="begin", help="start position of line to be replace by line mode [default: %default]", metavar="Integer")
        parser.add_option("-e", "--end", dest="end", help="end position of line to be replace by line mode  [default: %default]", metavar="Integer")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(path=".",suffix="", old="",new="",line='N',begin=0,end=0)

        # process options
        (opts, args) = parser.parse_args(argv)

#         if opts.verbose > 0:
#             print("verbosity level = %d" % opts.verbose)
#         if opts.path:
#             print("path = %s" % opts.path)
#         if opts.suffix:
#             print("suffix = %s" % opts.suffix)
#         if opts.old:
#             print("old = %s" % opts.old)
#         if opts.new:
#             print("new = %s" % opts.new)   
        
        # MAIN BODY #
        procPath(opts.path, opts.suffix,opts.old,opts.new,opts.line,opts.begin,opts.end)
        
    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'tools.ReplaceContent_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
        
    sys.exit(main())
