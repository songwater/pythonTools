#!/usr/bin/python
# coding=utf-8
import time
import string
import sys
import os

from optparse import OptionParser


__all__ = []
__version__ = 0.1
__date__ = '2018-03-2'
__updated__ = '2018-03-2'

basedir = '.'
filelists = []
# 指定想要统计的文件类型
whitelist = ['php', 'py']


# 遍历文件, 递归遍历文件夹中的所有
def getFile(basedir,suffix_list):
    global filelists
    for parent, dirnames, filenames in os.walk(basedir):
        # for dirname in dirnames:
        #    getFile(os.path.join(parent,dirname)) #递归
        for filename in filenames:
            ext = filename.split('.')[-1]
            # 只统计指定的文件类型，略过一些log和cache文件
            if ext in suffix_list:
                filelists.append(os.path.join(parent, filename))


# 统计一个文件的行数
def countLine(fname):
    count = 0
    for file_line in open(fname).xreadlines():
        if file_line != '' and file_line != '\n':  # 过滤掉空行
            count += 1
    print fname + '----', count
    return count


def count_main(path,suffix):
    suffix_list = suffix.split(',')
    startTime = time.clock()
    getFile(path,suffix_list)
    totalline = 0
    for filelist in filelists:
        totalline = totalline + countLine(filelist)
    print 'total lines:', totalline
    print 'Done! Cost Time: %0.2f second' % (time.clock() - startTime)


def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    # program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = ''''''  # optional - give further explanation about what the program does
    program_license = "Copyright 2018 Sty (sty_email@aliyun.com)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-p", "--path", dest="path", help="set path to find[default: %default]", metavar="PATH")
        parser.add_option("-s", "--suffix", dest="suffix", help="set file suffix to find[default: %default]",
                          metavar="STRING")

        parser.add_option("-v", "--verbose", dest="verbose", action="count",
                          help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(path=".", suffix="")

        # process options
        (opts, args) = parser.parse_args(argv)

        #         if opts.verbose > 0:
        #             print("verbosity level = %d" % opts.verbose)
        #         if opts.path:
        #             print("path = %s" % opts.path)
        #         if opts.content:
        #             print("content = %s" % opts.content)

        # MAIN BODY #
        count_main(opts.path, opts.suffix)

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


DEBUG = 0
TESTRUN = 0
PROFILE = 0


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest

        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats

        profile_filename = 'tools.FindWithContent_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
